# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: vsrmmt123
# "service" is the name of this project. This will also be added to your AWS resource names.
service: lambda-eventbg

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: DEV

custom: ${file(./custom.yml):${self:provider.stage}}

resources:
  Resources:
    MySenderEventBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: MySenderEventBus_${self:provider.stage}
    
    MySenderEventBusRule:
      Type: AWS::Events::Rule
      Properties:
        Name: MySenderEventBus-acc-rule_${self:provider.stage}
        EventPattern:
          source:
            - my.application
          detail-type:
            - MyCustomDetail
            - MyNewDetail
        State: ENABLED
        EventBusName: !GetAtt MySenderEventBus.Name
        Targets:
          - Id: Id77a8ee67-2eed-4ff2-a138-e117c27e2ce3
            Arn: !Sub arn:aws:events:${AWS::Region}:${self:custom.receiverEbAWSAccount}:event-bus/my-receiver-eb
            RoleArn: !GetAtt MySenderEventBusRole.Arn
              
    MySenderEventBusRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: vsr-sender-acc-eb-role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: events.amazonaws.com
              Action: sts:AssumeRole

    MySenderEventBusPolicy:
      Type: AWS::IAM::RolePolicy
      Properties:
        PolicyName: vsr-sender-acc-eb-role-policy-${self:provider.stage}
        RoleName: !Ref MySenderEventBusRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: ActionsForResource
              Effect: Allow
              Action:
                - events:PutEvents
              Resource: !Sub arn:aws:events:${AWS::Region}:${self:custom.receiverEbAWSAccount}:event-bus/my-receiver-eb

plugins:
  - serverless-offline
